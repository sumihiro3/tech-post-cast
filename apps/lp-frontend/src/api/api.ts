/* tslint:disable */
/* eslint-disable */
/**
 * TechPostCast APIs
 * API document for TechPostCast APIs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HeadlineTopicProgramDto
 */
export interface HeadlineTopicProgramDto {
    /**
     * 番組ID
     * @type {string}
     * @memberof HeadlineTopicProgramDto
     */
    'id': string;
    /**
     * タイトル
     * @type {string}
     * @memberof HeadlineTopicProgramDto
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface HeadlineTopicProgramsCountDto
 */
export interface HeadlineTopicProgramsCountDto {
    /**
     * 番組数
     * @type {number}
     * @memberof HeadlineTopicProgramsCountDto
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface HeadlineTopicProgramsFindRequestDto
 */
export interface HeadlineTopicProgramsFindRequestDto {
    /**
     * ページあたりに取得する番組の数
     * @type {number}
     * @memberof HeadlineTopicProgramsFindRequestDto
     */
    'limit': number;
    /**
     * ページ番号
     * @type {number}
     * @memberof HeadlineTopicProgramsFindRequestDto
     */
    'page'?: number;
}

/**
 * ApiV1Api - axios parameter creator
 * @export
 */
export const ApiV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 指定のヘッドライントピック番組を取得する
         * @param {string} id 
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgram: async (id: string, xApiKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getHeadlineTopicProgram', 'id', id)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getHeadlineTopicProgram', 'xApiKey', xApiKey)
            const localVarPath = `/api/v1/headline-topic-programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ヘッドライントピック番組の番組ID一覧を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramIds: async (xApiKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getHeadlineTopicProgramIds', 'xApiKey', xApiKey)
            const localVarPath = `/api/v1/headline-topic-program-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ヘッドライントピック番組の一覧を取得する
         * @param {string} xApiKey API Key
         * @param {HeadlineTopicProgramsFindRequestDto} headlineTopicProgramsFindRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramList: async (xApiKey: string, headlineTopicProgramsFindRequestDto: HeadlineTopicProgramsFindRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getHeadlineTopicProgramList', 'xApiKey', xApiKey)
            // verify required parameter 'headlineTopicProgramsFindRequestDto' is not null or undefined
            assertParamExists('getHeadlineTopicProgramList', 'headlineTopicProgramsFindRequestDto', headlineTopicProgramsFindRequestDto)
            const localVarPath = `/api/v1/headline-topic-programs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(headlineTopicProgramsFindRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ヘッドライントピック番組の件数を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramsCount: async (xApiKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getHeadlineTopicProgramsCount', 'xApiKey', xApiKey)
            const localVarPath = `/api/v1/headline-topic-programs/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiV1Api - functional programming interface
 * @export
 */
export const ApiV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 指定のヘッドライントピック番組を取得する
         * @param {string} id 
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadlineTopicProgram(id: string, xApiKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeadlineTopicProgramDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadlineTopicProgram(id, xApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiV1Api.getHeadlineTopicProgram']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ヘッドライントピック番組の番組ID一覧を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadlineTopicProgramIds(xApiKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadlineTopicProgramIds(xApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiV1Api.getHeadlineTopicProgramIds']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ヘッドライントピック番組の一覧を取得する
         * @param {string} xApiKey API Key
         * @param {HeadlineTopicProgramsFindRequestDto} headlineTopicProgramsFindRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadlineTopicProgramList(xApiKey: string, headlineTopicProgramsFindRequestDto: HeadlineTopicProgramsFindRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HeadlineTopicProgramDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadlineTopicProgramList(xApiKey, headlineTopicProgramsFindRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiV1Api.getHeadlineTopicProgramList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary ヘッドライントピック番組の件数を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHeadlineTopicProgramsCount(xApiKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeadlineTopicProgramsCountDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHeadlineTopicProgramsCount(xApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiV1Api.getHeadlineTopicProgramsCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiV1Api - factory interface
 * @export
 */
export const ApiV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiV1ApiFp(configuration)
    return {
        /**
         * 
         * @summary 指定のヘッドライントピック番組を取得する
         * @param {string} id 
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgram(id: string, xApiKey: string, options?: RawAxiosRequestConfig): AxiosPromise<HeadlineTopicProgramDto> {
            return localVarFp.getHeadlineTopicProgram(id, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ヘッドライントピック番組の番組ID一覧を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramIds(xApiKey: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getHeadlineTopicProgramIds(xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ヘッドライントピック番組の一覧を取得する
         * @param {string} xApiKey API Key
         * @param {HeadlineTopicProgramsFindRequestDto} headlineTopicProgramsFindRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramList(xApiKey: string, headlineTopicProgramsFindRequestDto: HeadlineTopicProgramsFindRequestDto, options?: RawAxiosRequestConfig): AxiosPromise<Array<HeadlineTopicProgramDto>> {
            return localVarFp.getHeadlineTopicProgramList(xApiKey, headlineTopicProgramsFindRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ヘッドライントピック番組の件数を取得する
         * @param {string} xApiKey API Key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHeadlineTopicProgramsCount(xApiKey: string, options?: RawAxiosRequestConfig): AxiosPromise<HeadlineTopicProgramsCountDto> {
            return localVarFp.getHeadlineTopicProgramsCount(xApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiV1Api - object-oriented interface
 * @export
 * @class ApiV1Api
 * @extends {BaseAPI}
 */
export class ApiV1Api extends BaseAPI {
    /**
     * 
     * @summary 指定のヘッドライントピック番組を取得する
     * @param {string} id 
     * @param {string} xApiKey API Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiV1Api
     */
    public getHeadlineTopicProgram(id: string, xApiKey: string, options?: RawAxiosRequestConfig) {
        return ApiV1ApiFp(this.configuration).getHeadlineTopicProgram(id, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ヘッドライントピック番組の番組ID一覧を取得する
     * @param {string} xApiKey API Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiV1Api
     */
    public getHeadlineTopicProgramIds(xApiKey: string, options?: RawAxiosRequestConfig) {
        return ApiV1ApiFp(this.configuration).getHeadlineTopicProgramIds(xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ヘッドライントピック番組の一覧を取得する
     * @param {string} xApiKey API Key
     * @param {HeadlineTopicProgramsFindRequestDto} headlineTopicProgramsFindRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiV1Api
     */
    public getHeadlineTopicProgramList(xApiKey: string, headlineTopicProgramsFindRequestDto: HeadlineTopicProgramsFindRequestDto, options?: RawAxiosRequestConfig) {
        return ApiV1ApiFp(this.configuration).getHeadlineTopicProgramList(xApiKey, headlineTopicProgramsFindRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ヘッドライントピック番組の件数を取得する
     * @param {string} xApiKey API Key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiV1Api
     */
    public getHeadlineTopicProgramsCount(xApiKey: string, options?: RawAxiosRequestConfig) {
        return ApiV1ApiFp(this.configuration).getHeadlineTopicProgramsCount(xApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



