Tech Post Cast LPフロントエンド実装ルール

フレームワーク・ライブラリ
Nuxt 3 + Vuetify + TypeScript で実装してください
Nuxt設定はnuxt.config.tsに集約し、不要な設定は追加しないでください

コンポーネント設計
- ファイル名はPascalCaseで命名してください (例: TopHero.vue)
- コンポーネントはsrc/componentsディレクトリに配置してください
- 関連性のあるコンポーネントはサブディレクトリにまとめてください (例: components/hero/)
- コンポーネントはTypeScriptのSetup Scriptで実装してください
- テンプレートはPugを使用してください
- スタイルはSCSSまたはCSSを使用してください
- Props、Emits、Ref等の型は明示的に指定してください

スタイリング
- Vuetifyのコンポーネントを優先的に使用してください
- カスタムCSSはscoped属性を付与してください
- 色やサイズなどの変数はVuetifyのテーマ設定を使用してください
- レスポンシブデザインはVuetifyのブレークポイントを使用してください

状態管理
- ページレベルの状態はページコンポーネント内で管理してください
- 複数のコンポーネント間で共有する状態はcomposablesに切り出してください
- APIとの通信はsrc/apiディレクトリに実装してください
- 環境変数はruntimeConfigを介してアクセスしてください

API連携
- src/apiディレクトリはバックエンドのOpenAPI定義から自動生成されています
- 自動生成されたコードは直接編集せず、必要に応じてラッパーを作成してください
- APIクライアントの初期化と認証トークンの設定はプラグインで行ってください
- エラーハンドリングは適切に実装してください

型定義
- 共通の型定義はsrc/typesディレクトリに配置してください
- ドメイン固有の型定義は適切なサブディレクトリに配置してください (例: types/headline-topic-programs/)
- any型の使用は避け、適切な型を定義してください
- APIレスポンスの型はDtoサフィックスを付けてください
- 自動生成されたAPIの型定義は修正せず、必要に応じてラッパー型を定義してください

パフォーマンス最適化
- 大きなコンポーネントは適切に分割してください
- 画像は最適化してから使用してください
- 不要なレンダリングを避けるためにv-memoやv-onceを活用してください
- ルートごとに適切なレンダリング戦略を使用してください (SSG, SSR, CSR)

テスト
- 新機能追加時はユニットテストを作成してください
- コンポーネントのロジックはできるだけcomposablesに分離し、テスト可能にしてください

アクセシビリティ
- セマンティックなHTMLを使用してください
- 適切なARIAロールと属性を使用してください
- コントラスト比を考慮した色設計を行ってください
- キーボード操作に対応してください

SEO対策
- 各ページには適切なtitle, description, OGP設定を含めてください
- 構造化データを適切に設定してください
- 画像にはalt属性を設定してください

リンター・フォーマッター
- ESLintのルールに従ってコードを記述してください
- コードフォーマットはnpm run formatコマンドで整形してください
- コミット前に必ずlintチェックを実行してください
