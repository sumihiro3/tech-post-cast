// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector()]
}

// ヘッドライントピック番組
model HeadlineTopicProgram {
  // 今日のヘッドライントピックの一意なID
  id            String   @id @default(cuid()) @db.VarChar(100)
  // 今日のヘッドライントピックのタイトル
  title         String   @db.VarChar(255)
  // 台本
  script        Json     @db.Json
  // ヘッドライントピックの音声ファイルURL
  audioUrl      String   @default("") @map("audio_url") @db.VarChar(255)
  // 音声ファイルの長さ（ミリ秒）
  audioDuration Int      @default(0) @map("audio_duration")
  // チャプター情報
  chapters      Json     @default("[]") @db.Json
  // ヘッドライントピックの動画ファイルURL
  videoUrl      String   @default("") @map("video_url") @db.VarChar(255)
  // 画像URL
  imageUrl      String?  @map("image_url") @db.VarChar(255)
  // 今日のヘッドライントピックが作成された日時
  createdAt     DateTime @map("created_at")
  // 今日のヘッドライントピックの最終更新日時
  updatedAt     DateTime @map("updated_at")

  // 紹介している投稿の一覧
  posts QiitaPost[]

  // 台本のベクトルデータ
  scriptVector HeadlineTopicProgramScriptVector?
  // 番組で紹介されたお便り
  letters      ListenerLetter[]

  // テーブル名
  @@map("headline_topic_programs")
}

// ヘッドライントピック番組台本のベクトルデータ
model HeadlineTopicProgramScriptVector {
  // ヘッドライントピック番組のID
  id          String                @id @db.VarChar(100)
  // ベクトルデータ
  vector      Unsupported("vector")
  // ベクトル化のモデル名
  model       String                @map("model")
  // ベクトル化に使用されたトークン数
  totalTokens Int                   @map("total_tokens")
  // ベクトルデータの作成日時
  createdAt   DateTime              @default(now()) @map("created_at")

  // ベクトル化対象のヘッドライントピック番組
  headlineTopicProgram HeadlineTopicProgram @relation(fields: [id], references: [id])

  // テーブル名
  @@map("headline_topic_program_vectors")
}

// Qiita の記事
model QiitaPost {
  // 記事の一意なID Qiita 記事ID を利用する
  id          String   @id @default(cuid()) @db.VarChar(50)
  // 記事のタイトル
  title       String   @db.VarChar(255)
  // 記事の本文
  body        String
  // 記事のURL
  url         String   @db.VarChar(255)
  // 記事が作成された日時
  createdAt   DateTime @map("created_at")
  // 記事の最終更新日時
  updatedAt   DateTime @map("updated_at")
  // 記事投稿者のユーザ名
  authorName  String   @map("author_name") @db.VarChar(50)
  // 記事投稿者のユーザID
  authorId    String   @map("author_id") @db.VarChar(50)
  // この記事へのいいねの数
  likesCount  Int      @default(0) @map("likes_count")
  // この記事がストックされた数
  stocksCount Int      @default(0) @map("stocks_count")
  // 限定共有状態かどうかを表すフラグ
  private     Boolean  @default(false)
  // 情報を最新化した日時
  refreshedAt DateTime @default(now()) @map("refreshed_at")
  // 要約
  summary     String?

  // 記事が紹介されているヘッドライントピック番組
  headlineTopicProgramId String?               @map("headline_topic_program_id")
  headlineTopicProgram   HeadlineTopicProgram? @relation(fields: [headlineTopicProgramId], references: [id])

  // 記事が紹介されているパーソナライズされた番組
  // 複数の記事が、別のパーソナライズされた番組に紐づいている
  personalizedPrograms PersonalizedFeedProgram[]

  // 記事に紐づいているタグ
  tags QiitaPostTag[]

  // テーブル名
  @@map("qiita_posts")
}

// Qiita記事のタグ
model QiitaPostTag {
  id         String   @id @default(cuid()) @db.VarChar(100)
  name       String   @db.VarChar(100)
  itemsCount Int      @default(0) @map("items_count")
  iconUrl    String?  @map("icon_url") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 一つのタグには複数の記事が紐づいている
  posts QiitaPost[]

  @@map("qiita_post_tags")
}

// LINE ユーザー
model LineUser {
  // LINE ユーザーの一意なID
  id          String   @id @default(cuid()) @db.VarChar(50)
  // LINE ユーザーの表示名
  displayName String   @map("display_name") @db.VarChar(50)
  // LINE OA をフォローしているかどうかを表すフラグ
  isFollowed  Boolean  @default(false) @map("is_followed")
  // LINE OA をフォローした日時
  followedAt  DateTime @default(now()) @map("followed_at")
  // LINE ユーザーのプロフィール画像URL
  pictureUrl  String?  @map("picture_url") @db.VarChar(255)
  // LINE ユーザーの言語
  language    String?  @db.VarChar(10)
  // LINE ユーザーの作成日時
  createdAt   DateTime @default(now()) @map("created_at")
  // LINE ユーザーの最終更新日時
  updatedAt   DateTime @map("updated_at")

  // テーブル名
  @@map("line_users")
}

// 用語と読み方のペア
model Term {
  // ID
  id        Int      @id @default(autoincrement())
  // 用語
  term      String   @db.VarChar(255)
  // 読み方
  reading   String   @db.VarChar(255)
  // 作成日時
  createdAt DateTime @default(now())
  // 最終更新日時
  updatedAt DateTime @updatedAt

  // テーブル名
  @@map("terms")
}

// リスナーからのお便り
model ListenerLetter {
  // お便りの一意なID
  id        String   @id @default(cuid()) @db.VarChar(100)
  // お便りの本文
  body      String
  // お便りを送信したユーザーのペンネーム
  penName   String   @db.VarChar(50)
  // お便りの送信者のLINE ユーザーID
  senderId  String?  @map("sender_id") @db.VarChar(50)
  // お便りの送信日時
  sentAt    DateTime @default(now()) @map("sent_at")
  // お便りを紹介したヘッドライントピック番組のID
  programId String?  @map("program_id") @db.VarChar(100)
  // お便りの作成日時
  createdAt DateTime @default(now()) @map("created_at")
  // お便りの最終更新日時
  updatedAt DateTime @updatedAt @map("updated_at")

  // お便りを紹介したヘッドライントピック番組
  program HeadlineTopicProgram? @relation(fields: [programId], references: [id])

  // テーブル名
  @@map("listener_letters")
}

// アプリケーションの一般ユーザー
model AppUser {
  // ユーザーの一意なID（ClerkのユーザーID）
  id           String    @id @db.VarChar(50)
  // ユーザーの姓
  firstName    String?   @map("first_name") @db.VarChar(50)
  // ユーザーの名
  lastName     String?   @map("last_name") @db.VarChar(50)
  // ユーザーのメールアドレス
  email        String?   @db.VarChar(255)
  // ユーザーのプロフィール画像URL
  imageUrl     String?   @map("image_url") @db.VarChar(255)
  // ユーザーが有効かどうかを表すフラグ
  isActive     Boolean   @default(true) @map("is_active")
  // ユーザーの作成日時
  createdAt    DateTime  @default(now()) @map("created_at")
  // ユーザーの最終更新日時
  updatedAt    DateTime  @updatedAt @map("updated_at")
  // 最後にサインインした日時
  lastSignInAt DateTime? @map("last_sign_in_at")

  personalizedProgramFilters PersonalizedFeed[]
  personalizedPrograms       PersonalizedFeedProgram[]
  subscriptions              Subscription[]

  // テーブル名
  @@map("app_users")
}

// 料金プラン
model Plan {
  id          String   @id @default(cuid()) @db.VarChar(50)
  name        String   @db.VarChar(100)
  price       Int // 月額金額（円）
  description String   @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  subscriptions Subscription[]

  @@map("plans")
}

// ユーザーサブスクリプション
model Subscription {
  id        String    @id @default(cuid()) @db.VarChar(50)
  userId    String    @map("user_id") @db.VarChar(50)
  planId    String    @map("plan_id") @db.VarChar(50)
  startDate DateTime  @default(now()) @map("start_date")
  endDate   DateTime? @map("end_date")
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user AppUser @relation(fields: [userId], references: [id])
  plan Plan    @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// 各ユーザーのパーソナライズフィード設定
// このフィード設定を元に、
// ユーザーの好みに合わせた番組を生成する
model PersonalizedFeed {
  id             String   @id @default(cuid()) @db.VarChar(50)
  userId         String   @map("user_id") @db.VarChar(50)
  name           String   @db.VarChar(100)
  dataSource     String   @map("data_source") @db.VarChar(50) // 番組の情報源（Qiita、note など）
  filterConfig   Json     @map("filter_config")
  deliveryConfig Json     @map("delivery_config")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user         AppUser                   @relation(fields: [userId], references: [id])
  // フィルター設定
  // フィルターグループは、AND/OR の論理演算子で組み合わせることができる
  filterGroups FeedFilterGroup[]
  // フィード設定を元に生成された番組
  programs     PersonalizedFeedProgram[]

  @@map("personalized_feeds")
}

// パーソナライズフィードを構成するフィルターグループ
model FeedFilterGroup {
  id        String   @id @default(cuid()) @db.VarChar(50)
  // パーソナライズされた番組のフィルター設定のID
  filterId  String   @map("filter_id") @db.VarChar(50)
  name      String   @db.VarChar(100)
  logicType String   @default("OR") @map("logic_type") @db.VarChar(10) // AND/OR
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  personalizedFeed PersonalizedFeed  @relation(fields: [filterId], references: [id])
  tagFilters       TagFilter[]
  authorFilters    AuthorFilter[]
  dateRangeFilters DateRangeFilter[]

  @@map("feed_filter_groups")
}

// タグフィルター
model TagFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  tagName   String   @map("tag_name") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("tag_filters")
}

// 著者フィルター
model AuthorFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  authorId  String   @map("author_id") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("author_filters")
}

// 記事公開日フィルター
model DateRangeFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  // 何日以内の記事を対象とするか（10, 30, 60, 90, 180, 365 など）
  daysAgo   Int      @map("days_ago")
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("date_range_filters")
}

// パーソナライズフィードを元に生成された番組
model PersonalizedFeedProgram {
  id            String   @id @default(cuid()) @db.VarChar(100)
  userId        String   @map("user_id") @db.VarChar(50)
  feedId        String   @map("feed_id") @db.VarChar(50)
  title         String   @db.VarChar(255)
  // 台本
  script        Json     @db.Json
  // 番組の音声ファイルURL
  audioUrl      String   @default("") @map("audio_url") @db.VarChar(255)
  // 音声ファイルの長さ（ミリ秒）
  audioDuration Int      @default(0) @map("audio_duration")
  // チャプター情報
  chapters      Json     @default("[]") @db.Json
  // 画像URL
  imageUrl      String?  @map("image_url") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user  AppUser          @relation(fields: [userId], references: [id])
  // フィード設定
  feed  PersonalizedFeed @relation(fields: [feedId], references: [id])
  // 番組で紹介している投稿の一覧
  posts QiitaPost[]

  @@map("personalized_feed_programs")
}
