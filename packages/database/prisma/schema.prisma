// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector()]
}

/**
 * 配信間隔
 */
enum DeliveryFrequency {
  /**
   * 毎日
   * 毎日配信
   */
  DAILY
  /**
   * 週1回
   * 毎週月曜日に配信
   */
  TWICE_WEEKLY // 週2回
  /**
   * 週次
   * 毎週月曜日に配信
   */
  WEEKLY
}

// ヘッドライントピック番組
model HeadlineTopicProgram {
  // 今日のヘッドライントピックの一意なID
  id            String   @id @default(cuid()) @db.VarChar(100)
  // 今日のヘッドライントピックのタイトル
  title         String   @db.VarChar(255)
  // 台本
  script        Json     @db.Json
  // ヘッドライントピックの音声ファイルURL
  audioUrl      String   @default("") @map("audio_url") @db.VarChar(255)
  // 音声ファイルの長さ（ミリ秒）
  audioDuration Int      @default(0) @map("audio_duration")
  // チャプター情報
  chapters      Json     @default("[]") @db.Json
  // ヘッドライントピックの動画ファイルURL
  videoUrl      String   @default("") @map("video_url") @db.VarChar(255)
  // 画像URL
  imageUrl      String?  @map("image_url") @db.VarChar(255)
  // 今日のヘッドライントピックが作成された日時
  createdAt     DateTime @map("created_at")
  // 今日のヘッドライントピックの最終更新日時
  updatedAt     DateTime @map("updated_at")

  // 紹介している投稿の一覧
  posts QiitaPost[]

  // 台本のベクトルデータ
  scriptVector HeadlineTopicProgramScriptVector?
  // 番組で紹介されたお便り
  letters      ListenerLetter[]

  // テーブル名
  @@map("headline_topic_programs")
}

// ヘッドライントピック番組台本のベクトルデータ
model HeadlineTopicProgramScriptVector {
  // ヘッドライントピック番組のID
  id          String                @id @db.VarChar(100)
  // ベクトルデータ
  vector      Unsupported("vector")
  // ベクトル化のモデル名
  model       String                @map("model")
  // ベクトル化に使用されたトークン数
  totalTokens Int                   @map("total_tokens")
  // ベクトルデータの作成日時
  createdAt   DateTime              @default(now()) @map("created_at")

  // ベクトル化対象のヘッドライントピック番組
  headlineTopicProgram HeadlineTopicProgram @relation(fields: [id], references: [id])

  // テーブル名
  @@map("headline_topic_program_vectors")
}

// Qiita の記事
model QiitaPost {
  // 記事の一意なID Qiita 記事ID を利用する
  id          String   @id @default(cuid()) @db.VarChar(50)
  // 記事のタイトル
  title       String   @db.VarChar(255)
  // 記事の本文
  body        String
  // 記事のURL
  url         String   @db.VarChar(255)
  // 記事が作成された日時
  createdAt   DateTime @map("created_at")
  // 記事の最終更新日時
  updatedAt   DateTime @map("updated_at")
  // 記事投稿者のユーザ名
  authorName  String   @map("author_name") @db.VarChar(50)
  // 記事投稿者のユーザID
  authorId    String   @map("author_id") @db.VarChar(50)
  // この記事へのいいねの数
  likesCount  Int      @default(0) @map("likes_count")
  // この記事がストックされた数
  stocksCount Int      @default(0) @map("stocks_count")
  // 限定共有状態かどうかを表すフラグ
  private     Boolean  @default(false)
  // 情報を最新化した日時
  refreshedAt DateTime @default(now()) @map("refreshed_at")
  // 要約
  summary     String?

  // 記事が紹介されているヘッドライントピック番組
  headlineTopicProgramId String?               @map("headline_topic_program_id")
  headlineTopicProgram   HeadlineTopicProgram? @relation(fields: [headlineTopicProgramId], references: [id])

  // 記事が紹介されているパーソナライズされた番組
  // 複数の記事が、別のパーソナライズされた番組に紐づいている
  personalizedPrograms PersonalizedFeedProgram[]

  // 記事に紐づいているタグ
  tags QiitaPostTag[]

  // テーブル名
  @@map("qiita_posts")
}

// Qiita記事のタグ
model QiitaPostTag {
  id         String   @id @default(cuid()) @db.VarChar(100)
  name       String   @db.VarChar(100)
  itemsCount Int      @default(0) @map("items_count")
  iconUrl    String?  @map("icon_url") @db.VarChar(255)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // 一つのタグには複数の記事が紐づいている
  posts QiitaPost[]

  @@map("qiita_post_tags")
}

// LINE ユーザー
model LineUser {
  // LINE ユーザーの一意なID
  id          String   @id @default(cuid()) @db.VarChar(50)
  // LINE ユーザーの表示名
  displayName String   @map("display_name") @db.VarChar(50)
  // LINE OA をフォローしているかどうかを表すフラグ
  isFollowed  Boolean  @default(false) @map("is_followed")
  // LINE OA をフォローした日時
  followedAt  DateTime @default(now()) @map("followed_at")
  // LINE ユーザーのプロフィール画像URL
  pictureUrl  String?  @map("picture_url") @db.VarChar(255)
  // LINE ユーザーの言語
  language    String?  @db.VarChar(10)
  // LINE ユーザーの作成日時
  createdAt   DateTime @default(now()) @map("created_at")
  // LINE ユーザーの最終更新日時
  updatedAt   DateTime @map("updated_at")

  // テーブル名
  @@map("line_users")
}

// 用語と読み方のペア
model Term {
  // ID
  id        Int      @id @default(autoincrement())
  // 用語
  term      String   @db.VarChar(255)
  // 読み方
  reading   String   @db.VarChar(255)
  // 作成日時
  createdAt DateTime @default(now())
  // 最終更新日時
  updatedAt DateTime @updatedAt

  // テーブル名
  @@map("terms")
}

// リスナーからのお便り
model ListenerLetter {
  // お便りの一意なID
  id        String   @id @default(cuid()) @db.VarChar(100)
  // お便りの本文
  body      String
  // お便りを送信したユーザーのペンネーム
  penName   String   @db.VarChar(50)
  // お便りの送信者のLINE ユーザーID
  senderId  String?  @map("sender_id") @db.VarChar(50)
  // お便りの送信日時
  sentAt    DateTime @default(now()) @map("sent_at")
  // お便りを紹介したヘッドライントピック番組のID
  programId String?  @map("program_id") @db.VarChar(100)
  // お便りの作成日時
  createdAt DateTime @default(now()) @map("created_at")
  // お便りの最終更新日時
  updatedAt DateTime @updatedAt @map("updated_at")

  // お便りを紹介したヘッドライントピック番組
  program HeadlineTopicProgram? @relation(fields: [programId], references: [id])

  // テーブル名
  @@map("listener_letters")
}

// アプリケーションの一般ユーザー
model AppUser {
  // ユーザーの一意なID（ClerkのユーザーID）
  id           String    @id @db.VarChar(50)
  // ユーザーの表示名
  displayName  String    @default("") @map("display_name") @db.VarChar(100)
  // ユーザーの姓
  firstName    String?   @map("first_name") @db.VarChar(50)
  // ユーザーの名
  lastName     String?   @map("last_name") @db.VarChar(50)
  // ユーザーのメールアドレス
  email        String?   @db.VarChar(255)
  // ユーザーのプロフィール画像URL
  imageUrl     String?   @map("image_url") @db.VarChar(255)
  // ユーザーが有効かどうかを表すフラグ
  isActive     Boolean   @default(true) @map("is_active")
  // ユーザーの作成日時
  createdAt    DateTime  @default(now()) @map("created_at")
  // ユーザーの最終更新日時
  updatedAt    DateTime  @updatedAt @map("updated_at")
  // 最後にサインインした日時
  lastSignInAt DateTime? @map("last_sign_in_at")

  // Stripe関連フィールド
  // Stripeの顧客ID
  stripeCustomerId       String? @map("stripe_customer_id") @db.VarChar(100)
  // デフォルトの支払い方法ID
  defaultPaymentMethodId String? @map("default_payment_method_id") @db.VarChar(100)

  // リレーション
  personalizedProgramFilters PersonalizedFeed[]
  personalizedPrograms       PersonalizedFeedProgram[]
  subscriptions              Subscription[]
  subscriptionHistories      SubscriptionHistory[]
  paymentMethods             PaymentMethod[]
  invoices                   Invoice[]

  // テーブル名
  @@map("app_users")
}

// 料金プラン
model Plan {
  id          String   @id @default(cuid()) @db.VarChar(50)
  name        String   @db.VarChar(100)
  price       Int // 月額金額（円）
  description String   @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  maxFeeds    Int      @default(1) @map("max_feeds")
  maxAuthors  Int      @default(1) @map("max_authors")
  maxTags     Int      @default(1) @map("max_tags")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Stripe関連フィールド
  // Stripeの価格ID
  stripePriceId   String? @map("stripe_price_id") @db.VarChar(100)
  // 価格タイプ（定期課金または一時払い）
  stripePriceType String  @default("recurring") @map("stripe_price_type") @db.VarChar(20) // recurring または one_time
  // 請求間隔（月次または年次）
  billingInterval String  @default("month") @map("billing_interval") @db.VarChar(20) // month または year

  subscriptions         Subscription[]
  subscriptionHistories SubscriptionHistory[]

  @@map("plans")
}

// ユーザーサブスクリプション
model Subscription {
  id        String    @id @default(cuid()) @db.VarChar(50)
  userId    String    @map("user_id") @db.VarChar(50)
  planId    String    @map("plan_id") @db.VarChar(50)
  startDate DateTime  @default(now()) @map("start_date")
  endDate   DateTime? @map("end_date")
  isActive  Boolean   @default(true) @map("is_active")
  status    String    @default("ACTIVE") @db.VarChar(20) // ACTIVE, PAST_DUE, CANCELED, TRIALING, INCOMPLETE
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Stripe関連フィールド
  // StripeのサブスクリプションID
  stripeSubscriptionId String?   @map("stripe_subscription_id") @db.VarChar(100)
  // Stripeの価格ID
  stripePriceId        String?   @map("stripe_price_id") @db.VarChar(100)
  // 現在の請求期間の開始日時
  currentPeriodStart   DateTime? @map("current_period_start")
  // 現在の請求期間の終了日時
  currentPeriodEnd     DateTime? @map("current_period_end")
  // サブスクリプションのキャンセル予定日時
  cancelAt             DateTime? @map("cancel_at")
  // サブスクリプションが実際にキャンセルされた日時
  canceledAt           DateTime? @map("canceled_at")
  // トライアル期間の開始日時
  trialStart           DateTime? @map("trial_start")
  // トライアル期間の終了日時
  trialEnd             DateTime? @map("trial_end")

  user      AppUser               @relation(fields: [userId], references: [id])
  plan      Plan                  @relation(fields: [planId], references: [id])
  histories SubscriptionHistory[]
  invoices  Invoice[]

  @@map("subscriptions")
}

// サブスクリプション履歴
model SubscriptionHistory {
  id             String    @id @default(cuid()) @db.VarChar(50)
  subscriptionId String    @map("subscription_id") @db.VarChar(50)
  userId         String    @map("user_id") @db.VarChar(50)
  planId         String    @map("plan_id") @db.VarChar(50)
  status         String    @db.VarChar(20)
  startDate      DateTime  @map("start_date")
  endDate        DateTime? @map("end_date")
  createdAt      DateTime  @default(now()) @map("created_at")

  // Stripe関連フィールド
  // StripeのサブスクリプションID
  stripeSubscriptionId String?   @map("stripe_subscription_id") @db.VarChar(100)
  // Stripeの価格ID
  stripePriceId        String?   @map("stripe_price_id") @db.VarChar(100)
  // 現在の請求期間の開始日時
  currentPeriodStart   DateTime? @map("current_period_start")
  // 現在の請求期間の終了日時
  currentPeriodEnd     DateTime? @map("current_period_end")
  // サブスクリプションのキャンセル予定日時
  cancelAt             DateTime? @map("cancel_at")
  // サブスクリプションが実際にキャンセルされた日時
  canceledAt           DateTime? @map("canceled_at")
  // StripeのイベントID
  stripeEventId        String?   @map("stripe_event_id") @db.VarChar(100)
  // Stripeのイベントタイプ
  stripeEventType      String?   @map("stripe_event_type") @db.VarChar(100)

  subscription Subscription @relation(fields: [subscriptionId], references: [id])
  user         AppUser      @relation(fields: [userId], references: [id])
  plan         Plan         @relation(fields: [planId], references: [id])

  @@map("subscription_histories")
}

// 各ユーザーのパーソナライズフィード設定
// このフィード設定を元に、
// ユーザーの好みに合わせた番組を生成する
model PersonalizedFeed {
  id                String            @id @default(cuid()) @db.VarChar(50)
  userId            String            @map("user_id") @db.VarChar(50)
  name              String            @db.VarChar(100)
  dataSource        String            @map("data_source") @db.VarChar(50) // 番組の情報源（Qiita、note など）
  filterConfig      Json              @map("filter_config")
  deliveryConfig    Json              @map("delivery_config")
  deliveryFrequency DeliveryFrequency @default(WEEKLY) @map("delivery_frequency")
  isActive          Boolean           @default(true) @map("is_active")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  user         AppUser                   @relation(fields: [userId], references: [id])
  // フィルター設定
  // フィルターグループは、AND/OR の論理演算子で組み合わせることができる
  filterGroups FeedFilterGroup[]
  // フィード設定を元に生成された番組
  programs     PersonalizedFeedProgram[]

  @@map("personalized_feeds")
}

// パーソナライズフィードを構成するフィルターグループ
model FeedFilterGroup {
  id        String   @id @default(cuid()) @db.VarChar(50)
  // パーソナライズされた番組のフィルター設定のID
  filterId  String   @map("filter_id") @db.VarChar(50)
  name      String   @db.VarChar(100)
  logicType String   @default("OR") @map("logic_type") @db.VarChar(10) // AND/OR
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  personalizedFeed  PersonalizedFeed   @relation(fields: [filterId], references: [id])
  tagFilters        TagFilter[]
  authorFilters     AuthorFilter[]
  dateRangeFilters  DateRangeFilter[]
  likesCountFilters LikesCountFilter[]

  @@map("feed_filter_groups")
}

// タグフィルター
model TagFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  tagName   String   @map("tag_name") @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("tag_filters")
}

// 著者フィルター
model AuthorFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  authorId  String   @map("author_id") @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("author_filters")
}

// 記事公開日フィルター
model DateRangeFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  // 何日以内の記事を対象とするか（10, 30, 60, 90, 180, 365 など）
  daysAgo   Int      @map("days_ago")
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("date_range_filters")
}

// いいね数フィルター
model LikesCountFilter {
  id        String   @id @default(cuid()) @db.VarChar(50)
  groupId   String   @map("group_id") @db.VarChar(50)
  // 最小いいね数 (以上)
  minLikes  Int      @default(0) @map("min_likes")
  createdAt DateTime @default(now()) @map("created_at")

  feedFilterGroup FeedFilterGroup @relation(fields: [groupId], references: [id])

  @@map("likes_count_filters")
}

// パーソナライズフィードを元に生成された番組
model PersonalizedFeedProgram {
  id            String   @id @default(cuid()) @db.VarChar(100)
  userId        String   @map("user_id") @db.VarChar(50)
  feedId        String   @map("feed_id") @db.VarChar(50)
  title         String   @db.VarChar(255)
  // 台本
  script        Json     @db.Json
  // 番組の音声ファイルURL
  audioUrl      String   @default("") @map("audio_url") @db.VarChar(255)
  // 音声ファイルの長さ（ミリ秒）
  audioDuration Int      @default(0) @map("audio_duration")
  // チャプター情報
  chapters      Json     @default("[]") @db.Json
  // 画像URL
  imageUrl      String?  @map("image_url") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user  AppUser          @relation(fields: [userId], references: [id])
  // フィード設定
  feed  PersonalizedFeed @relation(fields: [feedId], references: [id])
  // 番組で紹介している投稿の一覧
  posts QiitaPost[]

  @@map("personalized_feed_programs")
}

// 支払い方法
model PaymentMethod {
  id             String   @id @default(cuid()) @db.VarChar(50)
  userId         String   @map("user_id") @db.VarChar(50)
  // Stripeの支払い方法ID
  stripeMethodId String   @map("stripe_method_id") @db.VarChar(100)
  // 支払い方法のタイプ（カード、銀行口座など）
  type           String   @db.VarChar(50) // card, bank, etc.
  // デフォルトの支払い方法かどうか
  isDefault      Boolean  @default(false) @map("is_default")
  // クレジットカード番号の下4桁
  last4          String?  @db.VarChar(4) // クレジットカード番号の下4桁
  // カードブランド（Visa、Mastercardなど）
  brand          String?  @db.VarChar(20) // visa, mastercard, etc.
  // カードの有効期限（月）
  expiryMonth    Int?     @map("expiry_month")
  // カードの有効期限（年）
  expiryYear     Int?     @map("expiry_year")
  // 支払い方法が有効かどうか
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user AppUser @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

// 請求書
model Invoice {
  id                    String    @id @default(cuid()) @db.VarChar(50)
  userId                String    @map("user_id") @db.VarChar(50)
  subscriptionId        String?   @map("subscription_id") @db.VarChar(50)
  // Stripeの請求書ID
  stripeInvoiceId       String    @map("stripe_invoice_id") @db.VarChar(100)
  // Stripeの支払いインテントID
  stripePaymentIntentId String?   @map("stripe_payment_intent_id") @db.VarChar(100)
  // 請求金額
  amount                Int
  // 通貨（デフォルトは日本円）
  currency              String    @default("jpy") @db.VarChar(3)
  // 請求書のステータス
  status                String    @db.VarChar(20) // paid, open, void, uncollectible
  // 支払い完了日時
  paidAt                DateTime? @map("paid_at")
  // 請求書PDFのURL
  invoicePdf            String?   @map("invoice_pdf") @db.VarChar(255)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  user         AppUser       @relation(fields: [userId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("invoices")
}

// StripeのWebhookイベント
model StripeWebhookEvent {
  // イベントの一意の識別子
  id            String    @id @default(cuid()) @db.VarChar(50)
  // Stripeイベントの一意のID（Stripe側で生成されるID）
  stripeEventId String    @unique @map("stripe_event_id") @db.VarChar(100)
  // イベントのタイプ（例：customer.subscription.updated, customer.subscription.deleted）
  type          String    @db.VarChar(100)
  // イベントのペイロードデータ（JSON形式で保存）
  data          Json      @db.Json
  // イベントの作成日時
  created       DateTime  @default(now())
  // イベントが処理されたかどうかを示すフラグ
  processed     Boolean   @default(false)
  // イベントが処理された日時
  processedAt   DateTime? @map("processed_at")
  // イベント処理中に発生したエラーメッセージ
  error         String?   @db.Text
  // イベント処理の再試行回数
  retryCount    Int       @default(0) @map("retry_count")
  // 最後に再試行された日時
  lastRetryAt   DateTime? @map("last_retry_at")

  @@index([type])
  @@index([processed])
  @@map("stripe_webhook_events")
}
