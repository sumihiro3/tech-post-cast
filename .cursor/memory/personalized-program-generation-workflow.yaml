main:
  params: [args]
  steps:
    - init:
        assign:
          # 番組生成バックエンドのURL
          # TODO: 環境変数から取得するようにする
          - baseUrl: https://kkrxv971-3000.asse.devtunnels.ms
          # 並列処理の最大数
          - concurrencyLimit: 3
          # Qiita APIのレートリミットがこの値を下回ると停止する
          - minQiitaRateRemaining: 100
    - logBaseUrl:
        call: sys.log
        args:
          text: ${"Base URL is " + baseUrl}
          severity: DEBUG
    # 番組生成対象のパーソナルフィード一覧を取得する
    - getActiveFeeds:
        call: http.get
        args:
          url: ${baseUrl + "/personalized-feeds/active-feeds"}
        result: feeds
    # パーソナルフィードごとに番組生成を行う
    - processFeeds:
        parallel:
          # 並列処理の最大数
          concurrency_limit: ${concurrencyLimit}
          for:
            value: feed
            in: ${feeds.body}
            steps:
              - logFeed:
                  call: sys.log
                  args:
                    text: ${"Start processing feed is " + feed.id}
                    severity: INFO
              # パーソナルフィードごとに番組生成を行う
              - generateProgram:
                  try:
                    steps:
                      - makeRequest:
                          call: http.post
                          args:
                            url: ${baseUrl + "/personalized-feeds/generate-program/" + feed.id}
                          result: programResult
                  except:
                    # エラーが発生した場合はエラーログを出力し、エラー通知を行う
                    as: e
                    steps:
                      - logError:
                          call: sys.log
                          args:
                            text: ${"Error is " + e}
                            severity: ERROR
                      - notifyError:
                          call: http.post
                          args:
                            url: ${baseUrl + "/personalized-feeds/notify-error"}
                            body:
                              feedId: ${feed.id}
                              error: ${e}
              # 番組生成結果をログに出力する
              - logProgramResult:
                  call: sys.log
                  args:
                    text: ${"Generated program ID (" + programResult.body.programId + "); Qiita rate remaining (" + programResult.body.qiitaRateRemaining + ");"}
                    severity: INFO
              # Qiita APIのレートリミットが下限を下回っていないかを確認する
              - checkRateLimit:
                  switch:
                    - condition: ${programResult.body.qiitaRateRemaining < minQiitaRateRemaining}
                      steps:
                        - calculateWaitTime:
                            assign:
                              - waitSeconds: ${programResult.body.qiitaRateReset - sys.now()}
                        - logWaitTime:
                            call: sys.log
                            args:
                              text: ${"qiitaRateReset (" + programResult.body.qiitaRateReset + "); waitSeconds (" + waitSeconds + "); sys.now (" + sys.now() + ")"}
                              severity: DEBUG
                        - logWaitUntilRateLimitReset:
                            call: sys.log
                            args:
                              text: ${"Wait until rate limit reset (" + waitSeconds + " seconds)"}
                              severity: INFO
                        # Qiita APIのレートリミットが下限を下回っている場合はレートリミットがリセットされるまで待機する
                        - waitUntilRateLimitReset:
                            call: sys.sleep
                            args:
                              seconds: ${waitSeconds}
                        - logWaitedForRateLimitReset:
                            call: sys.log
                            args:
                              text: ${"Waited for rate limit reset!! Reset time is " + programResult.body.qiitaRateReset}
                              severity: INFO
    # 番組生成完了通知を行う
    - finalize:
        steps:
          - notifyCompletion:
              call: http.post
              args:
                url: ${baseUrl + "/personalized-feeds/finalize"}
                body:
                  # 処理対象のパーソナルフィード数
                  totalFeeds: ${feeds.body.length}
                  # 処理完了時間
                  timestamp: ${sys.now()}
              result: finalizeResult
          - logCompletion:
              call: sys.log
              args:
                text: 'Program generation completed!!'
          - returnResult:
              return: 'OK'
